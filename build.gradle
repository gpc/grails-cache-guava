plugins {
    id "groovy"
    id "org.grails.grails-web"
    id "org.grails.grails-gsp"
    id "org.grails.grails-plugin" version '6.2.1'
    id "application"
    id 'maven-publish'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version '2.0.0'
}

group "io.github.gpc"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core/" }
}

dependencies {
    implementation("org.grails:grails-core")
    implementation("org.grails:grails-logging")
    implementation("org.grails:grails-plugin-databinding")
    implementation("org.grails:grails-plugin-i18n")
    implementation("org.grails:grails-plugin-interceptors")
    implementation("org.grails:grails-plugin-services")
    implementation("org.grails:grails-plugin-url-mappings")
    implementation("org.grails:grails-web-boot")
    implementation("org.springframework.boot:spring-boot-autoconfigure")
    implementation("org.springframework.boot:spring-boot-starter-logging")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    compileOnly("io.micronaut:micronaut-inject-groovy")
    console("org.grails:grails-console")
    testImplementation("org.spockframework:spock-core")
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation("org.grails:grails-web-testing-support")
    testImplementation("org.grails.plugins:geb")
    testImplementation platform("org.seleniumhq.selenium:selenium-bom:${seleniumVersion}")
    testImplementation("org.seleniumhq.selenium:selenium-api")
    testImplementation("org.seleniumhq.selenium:selenium-remote-driver")
    testImplementation("org.seleniumhq.selenium:selenium-support")
    testImplementation("org.seleniumhq.selenium:selenium-http")
    testImplementation("org.seleniumhq.selenium:selenium-chrome-driver")
    testImplementation "org.testcontainers:spock:1.20.2"
    testImplementation "org.testcontainers:selenium:1.20.2"

    implementation "org.grails.plugins:cache"

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation 'com.google.guava:guava:33.3.1-jre'
}

application {
    mainClass.set("grails.cache.guava.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Release Demo'
                description = 'Release Demo for the GPC'
                url = 'https://github.com/gpc/release-demo'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'sbglasius'
                        name = 'SÃ¸ren Berg Glasius'
                        email = 'soeren+gpc@glasius.dk'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/gpc/release-demo.git'
                    developerConnection = 'scm:git:https://github.com/gpc/release-demo.git'
                    url = 'https://github.com/gpc/release-demo'
                }
            }
        }
    }
}
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

if (System.getenv('SIGNING_KEY_ID')) {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSPHRASE')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_FILE')
}

afterEvaluate {
    signing {
        if (System.getenv('SIGN_ARMORED_KEY')) {
            String signingKey = System.getenv('SIGN_ARMORED_KEY')
            String signingPassword = System.getenv('SIGN_PASSWORD')
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        required {
            isReleaseVersion
        }

        sign publishing.publications.maven
    }
}

tasks.withType(Sign).configureEach {
    onlyIf { isReleaseVersion }
}

import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository

tasks.withType(InitializeNexusStagingRepository).configureEach {
    shouldRunAfter(tasks.withType(Sign))
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileIdExternalConfig") ? project.sonatypeOssStagingProfileIdExternalConfig : ''

            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}